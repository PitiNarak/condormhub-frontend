'use client';

import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from '@/components/ui/alert-dialog';
import { useForm } from 'react-hook-form';
import Image from 'next/image';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { useState } from 'react';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import {
  House,
  CircleUserRound,
  LandPlot,
  Bed,
  ShowerHead,
  Banknote,
} from 'lucide-react';
import FormFieldComp from './formFieldComp';

export interface PropertyFormData {
  propertyName: string;
  owner: string;
  district: string;
  subdistrict: string;
  province: string;
  zipcode: string;
  size: number;
  numOfBedroom: number;
  numOfBathroom: number;
  description: string;
  price: number;
  image: string;
}

const propertySchema = z.object({
  propertyName: z.string().min(3, 'Property name is required'),
  owner: z.string().min(3, 'Owner name is required'),
  district: z.string().min(3, 'District is required'),
  subdistrict: z.string().min(3, 'Subdistrict is required'),
  province: z.string().min(3, 'Province is required'),
  zipcode: z.string().length(5, 'Zipcode must be 5 digits'),
  size: z.number().min(1, 'Size is required'),
  numOfBedroom: z.number().min(1, 'Number of bedrooms is required'),
  numOfBathroom: z.number().min(1, 'Number of bathrooms is required'),
  description: z.string().min(10, 'Description must be at least 10 characters'),
  price: z.number().min(1, 'Price is required'),
  image: z.any(),
});

export default function AddPropertyForm() {
  const form = useForm({
    resolver: zodResolver(propertySchema),
    defaultValues: {
      propertyName: '',
      owner: '',
      district: '',
      subdistrict: '',
      province: '',
      zipcode: '',
      size: 1,
      numOfBedroom: 1,
      numOfBathroom: 1,
      description: '',
      price: 1,
      image: '/image.jpeg',
    },
  });

  const [imagePreview, setImagePreview] = useState<string | null>(null);

  const onSubmit = async (data: PropertyFormData) => {
    console.log('Submitted Data:', data);
    // // Create a new Property object
    // const newProperty = new Property(
    //   0, // Assuming id is generated by the backend
    //   data.image as string, // Assuming image is a URL or base64 string
    //   0, // Default rating
    //   data.numOfBedroom,
    //   data.numOfBathroom,
    //   data.province as string,
    //   data.district as string,
    //   data.price,
    //   data.propertyName as string,
    //   data.owner as string,
    //   data.size,
    //   data.description as string
    // );
    // console.log('Property Object:', newProperty);

    // Create the request body according to the specified schema
    const requestBody = {
      address: {
        district: data.district as string,
        province: data.province as string,
        subdistrict: data.subdistrict as string,
        zipcode: data.zipcode as string,
      },
      bathrooms: data.numOfBathroom as number,
      bedrooms: data.numOfBedroom as number,
      description: data.description as string,
      name: data.propertyName as string,
      price: data.price as number,
      size: data.size as number,
    };
    console.log('Request body: ', requestBody);

    // Send to backend
    await fetch('/api/properties', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody),
    });
  };

  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      setImagePreview(URL.createObjectURL(file));
      form.setValue('image', URL.createObjectURL(file));
    }
  };

  return (
    <Form {...form}>
      <form
        onSubmit={form.handleSubmit(onSubmit)}
        className="space-y-4 max-w-3xl mx-auto pt-0"
      >
        <div className="grid grid-cols-2 gap-4">
          <FormFieldComp
            name="propertyName"
            control={form.control}
            placeholder="eg. piti_1"
            type="text"
            icon={<House />}
            label="Property name"
          />

          <FormFieldComp
            name="owner"
            control={form.control}
            placeholder="eg. piti"
            type="text"
            icon={<CircleUserRound />}
            label="Owner"
          />

          <FormField
            name="district"
            control={form.control}
            render={({ field }) => (
              <FormItem>
                <FormLabel>District</FormLabel>
                <FormControl>
                  <Input {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />

          <FormField
            name="subdistrict"
            control={form.control}
            render={({ field }) => (
              <FormItem>
                <FormLabel>Subdistrict</FormLabel>
                <FormControl>
                  <Input {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />

          <FormField
            name="province"
            control={form.control}
            render={({ field }) => (
              <FormItem>
                <FormLabel>Province</FormLabel>
                <FormControl>
                  <Input {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />

          <FormField
            name="zipcode"
            control={form.control}
            render={({ field }) => (
              <FormItem>
                <FormLabel>Zipcode</FormLabel>
                <FormControl>
                  <Input {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />

          <FormFieldComp
            name="size"
            control={form.control}
            placeholder="eg. 88"
            type="number"
            icon={<LandPlot />}
            label="Size"
          />

          <FormFieldComp
            name="numOfBedroom"
            control={form.control}
            placeholder="eg. 1"
            type="number"
            icon={<Bed />}
            label="Number of Bedroom"
          />

          <FormFieldComp
            name="numOfBathroom"
            control={form.control}
            placeholder="eg. 1"
            type="number"
            icon={<ShowerHead />}
            label="Number of Bathroom"
          />

          <FormFieldComp
            name="price"
            control={form.control}
            placeholder="eg. 123"
            type="number"
            icon={<Banknote />}
            label="Price"
          />

          <FormField
            name="description"
            control={form.control}
            render={({ field }) => (
              <FormItem className="col-span-2">
                <FormLabel>Description</FormLabel>
                <FormControl>
                  <Textarea {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />

          <FormField
            name="image"
            control={form.control}
            render={() => (
              <FormItem className="col-span-2">
                <FormLabel>Image</FormLabel>
                <FormControl>
                  <Input
                    type="file"
                    accept="image/*"
                    onChange={handleImageChange}
                  />
                </FormControl>
                {imagePreview && (
                  <Image
                    src={imagePreview}
                    alt="Image Preview"
                    width={128}
                    height={128}
                    className="mt-2 object-cover"
                  />
                )}
                <FormMessage />
              </FormItem>
            )}
          />
        </div>

        <AlertDialog>
          <div className="w-full h-12 bg-black border-2 border-black-700 rounded-lg flex items-center justify-center text-white text-xl cursor-pointer hover:bg-blue-600 active:bg-blue-700">
            <AlertDialogTrigger className="w-full">Submit</AlertDialogTrigger>
          </div>
          <AlertDialogContent>
            <AlertDialogHeader>
              <AlertDialogTitle>
                Are you sure to add this property?
              </AlertDialogTitle>
              <AlertDialogDescription>
                Please check the correctness of your information. Press Confirm
                to add your property, Cancel to go back.
              </AlertDialogDescription>
            </AlertDialogHeader>
            <AlertDialogFooter>
              <AlertDialogCancel>Cancel</AlertDialogCancel>
              <AlertDialogAction onClick={() => form.handleSubmit(onSubmit)()}>
                Confirm
              </AlertDialogAction>
            </AlertDialogFooter>
          </AlertDialogContent>
        </AlertDialog>
      </form>
    </Form>
  );
}
