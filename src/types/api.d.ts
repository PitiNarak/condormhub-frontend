/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/auth/login': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Login user
     * @description Login user
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description user information */
      requestBody: {
        content: {
          'application/json': components['schemas']['dto.LoginRequestBody'];
        };
      };
      responses: {
        /** @description user successfully logged in */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.SuccessResponse-dto_TokenWithUserInformationResponseBody'];
          };
        };
        /** @description your request is invalid */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description your request is unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description user not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description system cannot login user */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/refresh': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Refresh user
     * @description Refresh user
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description user information */
      requestBody: {
        content: {
          'application/json': components['schemas']['dto.RefreshTokenRequestBody'];
        };
      };
      responses: {
        /** @description user successfully Refresh in */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.SuccessResponse-dto_TokenResponseBody'];
          };
        };
        /** @description your request is invalid */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description your request is unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description user not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description system cannot refresh user */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/register': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Register new user
     * @description Register new user
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description user information */
      requestBody: {
        content: {
          'application/json': components['schemas']['dto.RegisterRequestBody'];
        };
      };
      responses: {
        /** @description user successfully registered */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.SuccessResponse-dto_TokenWithUserInformationResponseBody'];
          };
        };
        /** @description your request is invalid */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description system cannot register user */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/dorms': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all dorms
     * @description Retrieve a list of all dorms
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description All dorms retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.PaginationResponse-domain_Dorm'];
          };
        };
        /** @description your request is unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description Failed to retrieve dorms */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
      };
    };
    put?: never;
    /**
     * Create a new dorm
     * @description Add a new room to the database with the given details
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Dorm information */
      requestBody: {
        content: {
          'application/json': components['schemas']['dto.DormRequestBody'];
        };
      };
      responses: {
        /** @description Dorm successfully created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.SuccessResponse-domain_Dorm'];
          };
        };
        /** @description Your request is invalid */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description your request is unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description Failed to save dorm */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/dorms/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a dorm by ID
     * @description Retrieve a specific dorm based on its ID
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description DormID */
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Dorm data successfully retrieved */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.SuccessResponse-domain_Dorm'];
          };
        };
        /** @description Incorrect UUID format */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description your request is unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description Dorm not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description Server failed to retrieve dorm */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    /**
     * Delete a dorm
     * @description Removes a dorm from the database based on the give ID
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description DormID */
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Dorm successfully deleted */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.SuccessResponse-domain_Dorm'];
          };
        };
        /** @description Incorrect UUID format */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description your request is unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description Dorm not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description Failed to delete dorm */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
      };
    };
    options?: never;
    head?: never;
    /**
     * Update an existing dorm
     * @description Modifies an existing room's details based on the given ID
     */
    patch: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description DormID */
          id: string;
        };
        cookie?: never;
      };
      /** @description Updated Room Data */
      requestBody: {
        content: {
          'application/json': components['schemas']['dto.DormRequestBody'];
        };
      };
      responses: {
        /** @description Dorm data updated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.SuccessResponse-domain_Dorm'];
          };
        };
        /** @description Invalid Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description your request is unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description Dorm not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description Server failed to update dorm */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
      };
    };
    trace?: never;
  };
  '/history/bydorm/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all leasing history by userid
     * @description Retrieve a list of all leasing history by userid
     */
    get: {
      parameters: {
        query: {
          /** @description Number of history to be retirved */
          limit: string;
          /** @description Page to retrive */
          page: string;
        };
        header?: never;
        path: {
          /** @description DormID */
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Retrive history successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.PaginationResponse-domain_LeasingHistory'];
          };
        };
        /** @description Incorrect UUID format or limit parameter is incorrect or page parameter is incorrect or page exceeded */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description your request is unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description leasing history not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description Can not parse UUID */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/history/me': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all leasing history by userid
     * @description Retrieve a list of all leasing history by userid
     */
    get: {
      parameters: {
        query: {
          /** @description Number of history to be retirved */
          limit: string;
          /** @description Page to retrive */
          page: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Retrive history successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.PaginationResponse-domain_LeasingHistory'];
          };
        };
        /** @description Incorrect UUID format or limit parameter is incorrect or page parameter is incorrect or page exceeded */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description your request is unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description leasing history not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/history/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create a new leasing history
     * @description Add a new leasing history to the database
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description DormID */
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Dorm successfully created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.SuccessResponse-domain_LeasingHistory'];
          };
        };
        /** @description Incorrect UUID format */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description your request is unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description Dorm not found or leasing history not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description Can not parse UUID or failed to save leasing history to database */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
      };
    };
    /**
     * Delete a leasing history
     * @description Delete a leasing history in the database
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description LeasingHistoryId */
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Incorrect UUID format */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description your request is unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description leasing history not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description Can not parse UUID or Failed to delete leasing history */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
      };
    };
    options?: never;
    head?: never;
    /**
     * Delete a leasing history
     * @description Delete a leasing history in the database
     */
    patch: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description LeasingHistoryId */
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Set end timestamp successfully */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Incorrect UUID format */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description your request is unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description leasing history not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description Can not parse UUID or Failed to update leasing history */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
      };
    };
    trace?: never;
  };
  '/order': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create an order
     * @description Create an order
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Order request body */
      requestBody: {
        content: {
          'application/json': components['schemas']['dto.OrderRequestBody'];
        };
      };
      responses: {
        /** @description Order created successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.SuccessResponse-dto_OrderResponseBody'];
          };
        };
        /** @description your request is invalid */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description your request is unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description leasing history not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description cannot parse uuid or cannot delete user */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/order/unpaid/me': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get my unpaid orders by ID
     * @description Get my unpaid orders by ID
     */
    get: {
      parameters: {
        query: {
          /** @description Number of history to be retrieved */
          limit: string;
          /** @description Page to retrieved */
          page: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': Record<string, never>;
        };
      };
      responses: {
        /** @description Unpaid orders retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.PaginationResponse-dto_OrderResponseBody'];
          };
        };
        /** @description your request is invalid */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description your request is unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description leasing history not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description cannot parse uuid or cannot delete user */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/order/unpaid/{userID}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get unpaid orders by User ID
     * @description Get unpaid orders by User ID
     */
    get: {
      parameters: {
        query: {
          /** @description Number of history to be retrieved */
          limit: string;
          /** @description Page to retrieved */
          page: string;
        };
        header?: never;
        path: {
          /** @description User ID */
          userID: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': Record<string, never>;
        };
      };
      responses: {
        /** @description Order retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.PaginationResponse-dto_OrderResponseBody'];
          };
        };
        /** @description your request is invalid */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description your request is unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description leasing history not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description cannot parse uuid or cannot delete user */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/order/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get an order by ID
     * @description Get an order by ID
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Order ID */
          id: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': Record<string, never>;
        };
      };
      responses: {
        /** @description Order retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.SuccessResponse-dto_OrderResponseBody'];
          };
        };
        /** @description your request is invalid */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description your request is unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description leasing history not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description cannot parse uuid or cannot delete user */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/transaction': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create a transaction
     * @description Create a transaction
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Transaction request body */
      requestBody: {
        content: {
          'application/json': components['schemas']['dto.TransactionRequestBody'];
        };
      };
      responses: {
        /** @description Transaction created successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.SuccessResponse-dto_CreateTransactionResponseBody'];
          };
        };
        /** @description your request is invalid */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description your request is unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description leasing history not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description cannot parse uuid or cannot delete user */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/user': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Update user information
     * @description Update user information
     */
    patch: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description user information */
      requestBody: {
        content: {
          'application/json': components['schemas']['dto.UserInformationRequestBody'];
        };
      };
      responses: {
        /** @description user successfully updated account information */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.SuccessResponse-domain_User'];
          };
        };
        /** @description your request is invalid */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description your request is unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description system cannot update your account information */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
      };
    };
    trace?: never;
  };
  '/user/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * Delete a user account
     * @description Delete a user account
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': Record<string, never>;
        };
      };
      responses: {
        /** @description account successfully deleted */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description your request is unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description cannot parse uuid or cannot delete user */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/user/me': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get user information
     * @description Get user information
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description get user information successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.SuccessResponse-domain_User'];
          };
        };
        /** @description your request is unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description system cannot get user information */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/user/newpassword': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Reset password
     * @description Reset password
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description token */
      requestBody: {
        content: {
          'application/json': components['schemas']['dto.ResetPasswordRequestBody'];
        };
      };
      responses: {
        /** @description password reset successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.SuccessResponse-dto_TokenWithUserInformationResponseBody'];
          };
        };
        /** @description your request is invalid */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description system cannot reset password */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/user/resetpassword': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Resend verification email
     * @description Resend verification email
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description token */
      requestBody: {
        content: {
          'application/json': components['schemas']['dto.ResetPasswordCreateRequestBody'];
        };
      };
      responses: {
        /** @description email is sent to user successfully */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description your request is invalid */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description system cannot resend verification email */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/user/verify': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Verify email
     * @description Verify email
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description token */
      requestBody: {
        content: {
          'application/json': components['schemas']['dto.VerifyRequestBody'];
        };
      };
      responses: {
        /** @description email is verified successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.SuccessResponse-dto_TokenWithUserInformationResponseBody'];
          };
        };
        /** @description your request is invalid */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description your request is unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
        /** @description system cannot verify your email */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['dto.ErrorResponse'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    'domain.Address': {
      district: string;
      province: string;
      subdistrict: string;
      zipcode: string;
    };
    'domain.CheckoutStatus': string;
    'domain.Dorm': {
      address: components['schemas']['domain.Address'];
      bathrooms: number;
      bedrooms: number;
      createAt?: string;
      description?: string;
      id?: string;
      name: string;
      owner?: components['schemas']['domain.User'];
      ownerId: string;
      price: number;
      rating?: number;
      size: number;
      updateAt?: string;
    };
    'domain.LeasingHistory': {
      dorm?: components['schemas']['domain.Dorm'];
      dorm_id?: string;
      end?: string;
      id?: string;
      lessee?: components['schemas']['domain.User'];
      lessee_id?: string;
      orders?: components['schemas']['domain.Order'][];
      start?: string;
    };
    'domain.Lifestyle': string;
    'domain.Order': {
      createAt?: string;
      id?: string;
      leasingHistory?: components['schemas']['domain.LeasingHistory'];
      leasingHistoryID?: string;
      paidTransaction?: components['schemas']['domain.Transaction'];
      paidTransactionID?: string;
      price?: number;
      transactions?: components['schemas']['domain.Transaction'][];
      type?: components['schemas']['domain.OrderType'];
      updateAt?: string;
    };
    'domain.OrderType': string;
    'domain.Role': string;
    'domain.Transaction': {
      createAt?: string;
      id?: string;
      price?: number;
      status?: components['schemas']['domain.CheckoutStatus'];
      updateAt?: string;
    };
    'domain.User': {
      birthDate?: string;
      createAt?: string;
      email: string;
      filledPersonalInfo?: boolean;
      firstname?: string;
      gender?: string;
      id?: string;
      isStudentVerified?: boolean;
      isVerified?: boolean;
      lastname?: string;
      lifestyles?: components['schemas']['domain.Lifestyle'][];
      nationalID?: string;
      phoneNumber?: string;
      role?: components['schemas']['domain.Role'];
      /** @description studentEvidence */
      studentEvidence?: string;
      updateAt?: string;
      username: string;
    };
    'dto.CreateTransactionResponseBody': {
      checkoutUrl?: string;
    };
    'dto.DormRequestBody': {
      address: {
        district: string;
        province: string;
        subdistrict: string;
        zipcode: string;
      };
      bathrooms: number;
      bedrooms: number;
      description?: string;
      name: string;
      price: number;
      size: number;
    };
    'dto.ErrorResponse': {
      error?: string;
    };
    'dto.LoginRequestBody': {
      email: string;
      password: string;
    };
    'dto.OrderRequestBody': {
      leasingHistoryId: string;
    };
    'dto.OrderResponseBody': {
      id?: string;
      paidTransaction?: components['schemas']['domain.Transaction'];
      price?: number;
      type?: string;
    };
    'dto.Pagination': {
      current_page?: number;
      last_page?: number;
      limit?: number;
      total?: number;
    };
    'dto.PaginationResponse-domain_Dorm': {
      data?: components['schemas']['domain.Dorm'][];
      pagination?: components['schemas']['dto.Pagination'];
    };
    'dto.PaginationResponse-domain_LeasingHistory': {
      data?: components['schemas']['domain.LeasingHistory'][];
      pagination?: components['schemas']['dto.Pagination'];
    };
    'dto.PaginationResponse-dto_OrderResponseBody': {
      data?: components['schemas']['dto.OrderResponseBody'][];
      pagination?: components['schemas']['dto.Pagination'];
    };
    'dto.RefreshTokenRequestBody': {
      refreshToken: string;
    };
    'dto.RegisterRequestBody': {
      email: string;
      password: string;
      username: string;
    };
    'dto.ResetPasswordCreateRequestBody': {
      email: string;
    };
    'dto.ResetPasswordRequestBody': {
      password: string;
      token: string;
    };
    'dto.SuccessResponse-domain_Dorm': {
      data?: components['schemas']['domain.Dorm'];
    };
    'dto.SuccessResponse-domain_LeasingHistory': {
      data?: components['schemas']['domain.LeasingHistory'];
    };
    'dto.SuccessResponse-domain_User': {
      data?: components['schemas']['domain.User'];
    };
    'dto.SuccessResponse-dto_CreateTransactionResponseBody': {
      data?: components['schemas']['dto.CreateTransactionResponseBody'];
    };
    'dto.SuccessResponse-dto_OrderResponseBody': {
      data?: components['schemas']['dto.OrderResponseBody'];
    };
    'dto.SuccessResponse-dto_TokenResponseBody': {
      data?: components['schemas']['dto.TokenResponseBody'];
    };
    'dto.SuccessResponse-dto_TokenWithUserInformationResponseBody': {
      data?: components['schemas']['dto.TokenWithUserInformationResponseBody'];
    };
    'dto.TokenResponseBody': {
      accessToken?: string;
      refreshToken?: string;
    };
    'dto.TokenWithUserInformationResponseBody': {
      accessToken?: string;
      refreshToken?: string;
      userInformation?: components['schemas']['domain.User'];
    };
    'dto.TransactionRequestBody': {
      orderID?: string;
    };
    'dto.UserInformationRequestBody': {
      birthDate?: string;
      firstname?: string;
      gender?: string;
      lastname?: string;
      lifestyles?: components['schemas']['domain.Lifestyle'][];
      nationalID?: string;
      password?: string;
      phoneNumber?: string;
      studentEvidence?: string;
      username?: string;
    };
    'dto.VerifyRequestBody': {
      token: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
